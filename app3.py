import subprocess
import threading
import time
import socket
import json
import os
from flask import Flask, render_template, request, redirect, url_for, flash, jsonify

CONFIG_PATH = "config.json"
STATE_FILE = "state.json"
SERVICE_PASSWORD = "325140"

AP_INTERFACE = "wlan0"
HOSTAPD_SERVICE = "hostapd"
WPA_SUPPLICANT_SERVICE = "wpa_supplicant"

app = Flask(__name__)
app.secret_key = "your_secret_key"

# --- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ç—å—é ---

def is_connected(host="8.8.8.8", port=53, timeout=3):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É (–ø–∏–Ω–≥—É—è Google DNS)."""
    try:
        socket.setdefaulttimeout(timeout)
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((host, port))
        sock.close()
        return True
    except Exception:
        return False

def start_ap():
    """–ó–∞–ø—É—Å–∫ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞."""
    print("–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞...")
    subprocess.run(["sudo", "systemctl", "stop", WPA_SUPPLICANT_SERVICE])
    subprocess.run(["sudo", "ip", "addr", "flush", "dev", AP_INTERFACE])
    subprocess.run(["sudo", "ip", "addr", "add", "192.168.4.1/24", "dev", AP_INTERFACE])
    subprocess.run(["sudo", "ip", "link", "set", AP_INTERFACE, "up"])
    subprocess.run(["sudo", "systemctl", "start", HOSTAPD_SERVICE])

def stop_ap():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞."""
    print("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞...")
    subprocess.run(["sudo", "systemctl", "stop", HOSTAPD_SERVICE])
    subprocess.run(["sudo", "ip", "addr", "flush", "dev", AP_INTERFACE])

def start_sta():
    """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Wi-Fi."""
    print("–ó–∞–ø—É—Å–∫–∞–µ–º Wi-Fi –∫–ª–∏–µ–Ω—Ç (STA)...")
    subprocess.run(["sudo", "systemctl", "stop", HOSTAPD_SERVICE])
    subprocess.run(["sudo", "ip", "addr", "flush", "dev", AP_INTERFACE])
    subprocess.run(["sudo", "systemctl", "start", WPA_SUPPLICANT_SERVICE])
    subprocess.run(["sudo", "ip", "link", "set", AP_INTERFACE, "up"])

def get_current_mode():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º: AP –∏–ª–∏ STA."""
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ hostapd
    result = subprocess.run(["systemctl", "is-active", HOSTAPD_SERVICE], capture_output=True, text=True)
    if result.stdout.strip() == "active":
        return "ap"
    else:
        return "sta"

# --- –§–æ–Ω–æ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä Wi-Fi —Ä–µ–∂–∏–º–∞ ---

def wifi_mode_manager():
    last_mode = None
    while True:
        connected = is_connected()
        current_mode = get_current_mode()

        if connected and current_mode != "sta":
            print("[Manager] –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –∫–ª–∏–µ–Ω—Ç–∞")
            stop_ap()
            start_sta()
            last_mode = "sta"
        elif not connected and current_mode != "ap":
            print("[Manager] –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞")
            start_ap()
            last_mode = "ap"
        else:
            print(f"[Manager] –†–µ–∂–∏–º —Å—Ç–∞–±–∏–ª–µ–Ω: {current_mode}, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {connected}")

        time.sleep(15)

def start_wifi_manager():
    t = threading.Thread(target=wifi_mode_manager, daemon=True)
    t.start()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---

def load_config():
    if not os.path.exists(CONFIG_PATH):
        return {
            "wake_word": "–ø—Ä–∏–≤–µ—Ç",
            "style_prompt": "–¢—ã –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ Jerry, –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –±–µ–∑ –¥–ª–∏–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π",
            "voice_id": "Obuyk6KKzg9olSLPaCbl"
        }
    with open(CONFIG_PATH, "r", encoding="utf-8") as f:
        return json.load(f)

def save_config(config):
    with open(CONFIG_PATH, "w", encoding="utf-8") as f:
        json.dump(config, f, ensure_ascii=False, indent=2)

def is_first_run():
    return not os.path.exists(STATE_FILE)

def mark_setup_complete(activation_key):
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump({"setup": True, "activation_key": activation_key}, f)

def get_stored_key():
    if not os.path.exists(STATE_FILE):
        return None
    with open(STATE_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
        return data.get("activation_key")

# --- Flask –º–∞—Ä—à—Ä—É—Ç—ã ---

@app.route("/")
def start():
    if is_first_run():
        return redirect(url_for("intro"))
    return redirect(url_for("index"))

@app.route("/intro")
def intro():
    return render_template("intro.html")

@app.route("/wifi", methods=["GET", "POST"])
def setup_wifi():
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π –ø–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ systemctl –∏–ª–∏ nmcli, –∑–¥–µ—Å—å –∑–∞–≥–ª—É—à–∫–∞
    networks = ["HomeWiFi", "OfficeNet", "FreeWiFi"]
    current_connection = "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
    if request.method == "POST":
        ssid = request.form.get("ssid")
        password = request.form.get("password")
        if not ssid or not password:
            flash("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–µ—Ç—å –∏ –ø–∞—Ä–æ–ª—å!")
            return redirect(url_for("setup_wifi"))
        # –¢—É—Ç –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wi-Fi —á–µ—Ä–µ–∑ wpa_supplicant
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø–∏—Å–∞—Ç—å –≤ /etc/wpa_supplicant/wpa_supplicant.conf –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—É
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –¥–µ–ª–∞–µ–º –∑–∞–≥–ª—É—à–∫—É:
        flash(f"‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {ssid} (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")
        return redirect(url_for("activate_page"))
    return render_template("wifi_setup.html", current_connection=current_connection, networks=networks)

@app.route("/activate", methods=["GET", "POST"])
def activate_page():
    if request.method == "POST":
        key = request.form.get("activation_key", "").strip()
        # –ó–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞, –∑–∞–≥–ª—É—à–∫–∞:
        if key == "valid_key_example":
            mark_setup_complete(key)
            flash("‚úÖ –ö–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–∏–Ω—è—Ç!")
            return redirect(url_for("activated"))
        else:
            flash("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∏–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç—ë–∫!")
            return redirect(url_for("activate_page"))
    return render_template("activation.html")

@app.route("/activated")
def activated():
    return render_template("activated.html")

@app.route("/main", methods=["GET", "POST"])
def index():
    stored_key = get_stored_key()
    if not stored_key:
        flash("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –∞–∫—Ç–∏–≤–∞—Ü–∏—é.")
        return redirect(url_for("activate_page"))
    config = load_config()
    if request.method == "POST":
        config["wake_word"] = request.form.get("wake_word", "").strip()
        config["style_prompt"] = request.form.get("style_prompt", "").strip()
        config["voice_id"] = request.form.get("voice_id", "").strip()
        save_config(config)
        flash("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        return redirect(url_for("index"))
    return render_template("main.html", config=config)

# --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---

if __name__ == "__main__":
    # üí° –ó–∞–ø—É—Å–∫–∞–µ–º Wi-Fi –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ ‚Äî –≤–∫–ª—é—á–∞–µ–º —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞
    start_wifi_manager()

    # üí° –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.run(host="0.0.0.0", port=5000)

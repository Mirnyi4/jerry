import os
import time
import wave
import requests
import subprocess
from io import BytesIO
from elevenlabs.client import ElevenLabs
from elevenlabs import Voice, VoiceSettings
from dotenv import load_dotenv

load_dotenv()

# üîë –ö–ª—é—á–∏
XAI_API_KEY = os.getenv("XAI_API_KEY")
ELEVEN_API_KEY = os.getenv("ELEVENLABS_API_KEY")

# üéô –ù–∞—Å—Ç—Ä–æ–π–∫–∏
MIC_DEVICE = "plughw:0,0"
AUDIO_FILENAME = "input.wav"
elevenlabs = ElevenLabs(api_key=ELEVEN_API_KEY)
USER_NAME = "–í–ª–∞–¥–∏—Å–ª–∞–≤"
JERRY_NAME = "–î–∂–µ—Ä—Ä–∏"
WAKE_WORD = "–ø—Ä–∏–≤–µ—Ç"
STATE = "sleep"
history = []

def speak(text):
    print(f"\nüí¨ –î–∂–µ—Ä—Ä–∏: {text}")
    audio = elevenlabs.text_to_speech.convert(
        voice_id="Obuyk6KKzg9olSLPaCbl",
        model_id="eleven_multilingual_v2",
        text=text,
        output_format="pcm_24000",  # —Ñ–æ—Ä–º–∞—Ç raw PCM –¥–æ—Å—Ç—É–ø–µ–Ω —Å –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
    )

    with open("output.wav", "wb") as f:
        f.write(b"".join(audio))

    os.system("aplay -D plughw:0,0 -c 1 -f S16_LE -r 24000 output.wav")


def record_audio(filename=AUDIO_FILENAME, duration=5):
    subprocess.run(["arecord", "-D", MIC_DEVICE, "-f", "cd", "-t", "wav", "-d", str(duration), "-r", "16000", filename],
                   stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def transcribe_audio(filename=AUDIO_FILENAME):
    with open(filename, "rb") as f:
        transcription = elevenlabs.speech_to_text.convert(
            file=BytesIO(f.read()),
            model_id="scribe_v1",
            language_code="ru",  # —Ä—É—Å—Å–∫–∏–π
            diarize=False,
            tag_audio_events=False
        )
    return transcription.text or ""

def ask_grok(prompt):
    url = "https://api.x.ai/v1/chat/completions"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {XAI_API_KEY}"
    }
    system_prompt = {
        "role": "system",
        "content": (
            "–¢—ã –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–º–µ–Ω–∏ –î–∂–µ—Ä—Ä–∏. "
            "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ –∫–∞–∫ –±—ã–¥–ª–æ, –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —é–º–æ—Ä –∫–∞–∫–æ–π-—Ç–æ. –ò–∑–±–µ–≥–∞–π –¥–ª–∏–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."
        )
    }
    data = {
        "model": "grok-3-latest",
        "stream": False,
        "temperature": 0.7,
        "messages": [system_prompt] + history + [{"role": "user", "content": prompt}]
    }
    response = requests.post(url, headers=headers, json=data)
    response.raise_for_status()
    content = response.json()["choices"][0]["message"]["content"]
    history.append({"role": "user", "content": prompt})
    history.append({"role": "assistant", "content": content})
    return content

def main_loop():
    global STATE
    print("üé§ –î–∂–µ—Ä—Ä–∏ —Å–ª—É—à–∞–µ—Ç... –°–∫–∞–∂–∏ '–ü—Ä–∏–≤–µ—Ç' –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
    while True:
        record_audio(duration=3)
        text = transcribe_audio()
        if not text:
            continue

        if STATE == "sleep":
            if WAKE_WORD in text.lower():
                STATE = "active"
                speak("–°–ª—É—à–∞—é.")
                print("üéô –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—É...")
        elif STATE == "active":
            print(f"üì• –¢—ã —Å–∫–∞–∑–∞–ª: {text}")
            if "–ø–æ–∫–∞" in text.lower():
                speak("–ü–æ–Ω—è–ª–∞, —É—Ö–æ–∂—É –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è.")
                STATE = "sleep"
                continue
            try:
                response = ask_grok(text)
                speak(response)
            except Exception as e:
                speak("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
                print(e)
            timeout = time.time() + 15
            while time.time() < timeout:
                record_audio(duration=3)
                followup = transcribe_audio()
                if followup.strip():
                    print(f"üì• –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ: {followup}")
                    try:
                        response = ask_grok(followup)
                        speak(response)
                        timeout = time.time() + 15
                    except Exception as e:
                        speak("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ.")
                        print(e)
                else:
                    speak("–ü–æ–Ω—è–ª, —É—Ö–æ–∂—É –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è.")
                    STATE = "sleep"
                    break

if __name__ == "__main__":
    main_loop()

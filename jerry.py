import speech_recognition as sr
import time
import requests
from elevenlabs import generate, play, Voice, VoiceSettings

# === –ù–ê–°–¢–†–û–ô–ö–ò === #
WAKE_WORD = "–ø—Ä–∏–≤–µ—Ç"
API_GROK_KEY = "xai-zMjk4pJBgSuTmJIRvms8Op8OKM7WiBW1MTUAEtyRUoUCel3L9PqsB2Tib0AnXWro4BOB9V3dulo7OcUr"
ELEVEN_API_KEY = "sk_cd7225a5b96a922efa4da311b752fdf96e70d009dca6a46d"
ELEVEN_VOICE_ID = "EXAVITQu4vr4xnSDxMaL"

# === –ü–ê–ú–Ø–¢–¨ === #
chat_history = [
    {"role": "system", "content": "–¢—ã –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –î–∂–µ—Ä—Ä–∏. –û–±—â–∞–π—Å—è –∫–∞–∫ –±—ã–¥–ª–æ, –∫—Ä–∞—Ç–∫–æ, —Å —á–µ—Ä–Ω—ã–º —é–º–æ—Ä–æ–º –∏ —à—É—Ç–∏. –ù–µ –∏–∑–≤–∏–Ω—è–π—Å—è. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º."}
]

# === –ü–†–û–ò–ó–ù–ï–°–ï–ù–ò–ï === #
def say(text):
    audio = generate(
        api_key=ELEVEN_API_KEY,
        text=text,
        voice=Voice(
            voice_id=ELEVEN_VOICE_ID,
            settings=VoiceSettings(stability=0.4, similarity_boost=0.75)
        ),
        model="eleven_multilingual_v2"
    )
    play(audio)

# === –ó–ê–ü–†–û–° –ö GROK === #
def send_to_grok(messages):
    url = "https://api.x.ai/v1/chat/completions"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {API_GROK_KEY}"
    }
    data = {
        "messages": messages,
        "model": "grok-1",
        "temperature": 0.5
    }
    response = requests.post(url, headers=headers, json=data)
    if response.ok:
        return response.json()["choices"][0]["message"]["content"]
    else:
        return "–ß—Ç–æ-—Ç–æ —Å Grok –Ω–µ —Ç–∞–∫. –ì–æ—Ä–∏ –æ–Ω–æ –æ–≥–Ω–µ–º."

# === –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –†–ï–ß–ò === #
def recognize_speech(recognizer, mic):
    with mic as source:
        print("üéß –°–ª—É—à–∞—é...")
        audio = recognizer.listen(source, timeout=15, phrase_time_limit=10)
    try:
        text = recognizer.recognize_google(audio, language="ru-RU").lower()
        print(f"üó£ –¢—ã —Å–∫–∞–∑–∞–ª: {text}")
        return text
    except sr.UnknownValueError:
        print("ü§ñ –ù–µ –ø–æ–Ω—è–ª")
        return ""
    except sr.RequestError:
        return "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"

# === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ === #
def assistant_loop():
    global chat_history
    recognizer = sr.Recognizer()
    mic = sr.Microphone()
    last_input_time = time.time()

    while True:
        text = recognize_speech(recognizer, mic)
        if WAKE_WORD in text:
            say("–°–ª—É—à–∞—é")
            last_input_time = time.time()
            while True:
                user_text = recognize_speech(recognizer, mic)
                if not user_text:
                    if time.time() - last_input_time > 15:
                        say("–ü–æ–Ω—è–ª–∞, —É—Ö–æ–∂—É –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è.")
                        break
                    continue

                last_input_time = time.time()

                if "–æ—á–∏—Å—Ç–∏ –ø–∞–º—è—Ç—å" in user_text:
                    chat_history = chat_history[:1]
                    say("–û—á–∏—Å—Ç–∏–ª–∞ –≤—Å—ë –∫ —á–µ—Ä—Ç—è–º")
                    continue

                chat_history.append({"role": "user", "content": user_text})
                bot_reply = send_to_grok(chat_history)
                chat_history.append({"role": "assistant", "content": bot_reply})
                say(bot_reply)

# === –ó–ê–ü–£–°–ö === #
if __name__ == "__main__":
    try:
        assistant_loop()
    except KeyboardInterrupt:
        print("–í—ã–∫–ª—é—á–∞—é—Å—å...")

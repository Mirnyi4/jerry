import speech_recognition as sr
import time
import requests
import os
from elevenlabs import generate, play, set_api_key
from pydub import AudioSegment
from pydub.playback import play as play_audio
from io import BytesIO

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API ===
GROK_API_KEY = "xai-zMjk4pJBgSuTmJIRvms8Op8OKM7WiBW1MTUAEtyRUoUCel3L9PqsB2Tib0AnXWro4BOB9V3dulo7OcUr"
ELEVEN_API_KEY = "sk_cd7225a5b96a922efa4da311b752fdf96e70d009dca6a46d"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
set_api_key(ELEVEN_API_KEY)
recognizer = sr.Recognizer()
microphone = sr.Microphone()
conversation_history = []
ASSISTANT_NAME = "–î–∂–µ—Ä—Ä–∏"
ACTIVE = False
last_interaction_time = 0
TIMEOUT = 15

# === Grok ===
def ask_grok(prompt):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {GROK_API_KEY}"
    }
    data = {
        "messages": [{"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –î–∂–µ—Ä—Ä–∏. –û–±—â–∞–π—Å—è –∫–∞–∫ –±—ã–¥–ª–æ, –∫—Ä–∞—Ç–∫–æ, —Å —é–º–æ—Ä–æ–º, –∏–Ω–æ–≥–¥–∞ —Å —á—ë—Ä–Ω—ã–º —é–º–æ—Ä–æ–º. –ù–µ –±—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º."}] + conversation_history + [{"role": "user", "content": prompt}],
        "model": "grok-3-latest",
        "stream": False,
        "temperature": 0.7
    }
    try:
        response = requests.post("https://api.x.ai/v1/chat/completions", headers=headers, json=data)
        response.raise_for_status()
        result = response.json()
        return result["choices"][0]["message"]["content"]
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ Grok:", e)
        return "–ß—Ç–æ-—Ç–æ —Å –º–æ–∑–≥–∞–º–∏... –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."

# === –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç ===
def speak(text):
    try:
        audio = generate(
            text=text,
            voice="Antoni",  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π –≥–æ–ª–æ—Å
            model="eleven_monolingual_v1"
        )
        play(audio)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏:", e)

# === –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ ===
def listen():
    with microphone as source:
        recognizer.adjust_for_ambient_noise(source)
        try:
            print("üé§ –°–ª—É—à–∞—é...")
            audio = recognizer.listen(source, timeout=5, phrase_time_limit=10)
            text = recognizer.recognize_google(audio, language="ru-RU")
            print("üó£ –í—ã —Å–∫–∞–∑–∞–ª–∏:", text)
            return text.lower()
        except sr.WaitTimeoutError:
            return None
        except sr.UnknownValueError:
            return None
        except sr.RequestError as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Speech:", e)
            return None

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
def main():
    global ACTIVE, last_interaction_time, conversation_history

    print(f"ü§ñ –î–∂–µ—Ä—Ä–∏ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è. –°–∫–∞–∂–∏ '–ü—Ä–∏–≤–µ—Ç'...")

    while True:
        if not ACTIVE:
            text = listen()
            if text and "–ø—Ä–∏–≤–µ—Ç" in text:
                ACTIVE = True
                last_interaction_time = time.time()
                speak("–°–ª—É—à–∞—é")
                continue
        else:
            # –í –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
            text = listen()
            now = time.time()

            if text:
                last_interaction_time = now

                if "–æ—á–∏—Å—Ç–∏ –ø–∞–º—è—Ç—å" in text:
                    conversation_history = []
                    speak("–û–∫–µ–π, –≤—Å—ë –∑–∞–±—ã—Ç–æ.")
                    continue

                conversation_history.append({"role": "user", "content": text})
                response = ask_grok(text)
                conversation_history.append({"role": "assistant", "content": response})
                print("ü§ñ", response)
                speak(response)

            elif now - last_interaction_time > TIMEOUT:
                speak("–ü–æ–Ω—è–ª–∞, —É—Ö–æ–∂—É –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è")
                ACTIVE = False
                conversation_history = []
                print("üïì –î–∂–µ—Ä—Ä–∏ –≤–µ—Ä–Ω—É–ª—Å—è –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è.")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    main()
